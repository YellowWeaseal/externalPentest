package config

import (
	"fmt"
	"github.com/joho/godotenv"
	"github.com/kelseyhightower/envconfig"
	logger "github.com/sirupsen/logrus"
	"time"
)

type THttpServer struct {
	Host              string        `default:"0.0.0.0"`
	Port              uint16        `default:"8080"`
	ReadHeaderTimeout time.Duration `default:"60s"`
}

type TDb struct {
	User            string        `envconfig:"DB_USER" required:"true"`
	Password        string        `envconfig:"DB_PASSWORD" required:"true"`
	Name            string        `envconfig:"DB_NAME" required:"true"`
	MaxOpenConns    int           `envconfig:"DB_MAX_OPEN_CONNS" default:"10"`
	MaxIdleConns    int           `envconfig:"DB_MAX_IDLE_CONNS" default:"2"`
	ConnMaxLifetime time.Duration `envconfig:"DB_CONN_MAX_LIFETIME" default:"60s"`
	MasterHost      string        `envconfig:"DB_MASTER_HOST" required:"true"`
	SlaveHost       string        `envconfig:"DB_SYNC_SLAVE_HOST" required:"true"`
}

func (myDb *TDb) GetMasterDSN() (masterDSN string, maskedMasterDSN string) {
	dsn := "postgres://%s:%s@%s/%s?sslmode=disable"
	masterDSN = fmt.Sprintf(dsn, myDb.User, myDb.Password, myDb.MasterHost, myDb.Name)
	maskedMasterDSN = fmt.Sprintf(dsn, myDb.User, "****", myDb.MasterHost, myDb.Name)

	return masterDSN, maskedMasterDSN
}

func (myDb *TDb) GetSlaveDSN() (slaveDSN string, maskedSlaveDSN string) {
	dsn := "postgres://%s:%s@%s/%s?sslmode=disable"
	slaveDSN = fmt.Sprintf(dsn, myDb.User, myDb.Password, myDb.SlaveHost, myDb.Name)
	maskedSlaveDSN = fmt.Sprintf(dsn, myDb.User, "****", myDb.SlaveHost, myDb.Name)

	return slaveDSN, maskedSlaveDSN
}

func getEnvFilenames() []string {
	return []string{".env.local", ".env"}
}

func LoadConfig[TConfig NucleiConfig]() (*TConfig, error) {
	for _, fileName := range getEnvFilenames() {
		// in cycle cause first error in varargs prevents loading next files
		err := godotenv.Load(fileName)
		if err != nil {
			logger.Warnf("error loading %s fileName : %v", fileName, err)
		}
	}

	var cfg TConfig
	if err := envconfig.Process("", &cfg); err != nil {
		logger.Errorf("cannot process envs: %v", err)

		return nil, fmt.Errorf("cannot process envs: %w", err)
	} else {
		logger.Infof("Config initialized")
	}

	return &cfg, nil
}
