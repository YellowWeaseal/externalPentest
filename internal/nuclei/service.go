package nuclei

import (
	nuclei "github.com/projectdiscovery/nuclei/v3/lib"
	logger "github.com/sirupsen/logrus"
)

func (s *ScannerManager) Scan() {
	defer s.nucleiEngine.Close()

	target, err := s.db.GetTarget(s.scanName)
	if err != nil {
		logger.Debugf("error while getting target %v", err)
		return
	}
	scanSettings, err := s.db.GetScannerSettings(s.scanName)
	if err != nil {
		logger.Debugf("error during init Scan %v", err)
		return
	}
	s.nucleiEngine.LoadTargets(target.Target, target.ProbeNonHttp)
	s.nucleiEngine, err = nuclei.NewNucleiEngine(
		nuclei.EnableHeadlessWithOpts(scanSettings.HeadLessOpt),
		nuclei.EnableStatsWithOpts(scanSettings.StatOpt),
		nuclei.WithInteractshOptions(scanSettings.InterOpts),
		nuclei.WithNetworkConfig(scanSettings.NetConf),
		nuclei.WithTemplateFilters(scanSettings.TempFilter),
		nuclei.WithGlobalRateLimit(scanSettings.MaxTokens, scanSettings.Duration),
		nuclei.WithVerbosity(scanSettings.VerbOpt),
		nuclei.WithTemplatesOrWorkflows(scanSettings.TempSources),
	)
	if err != nil {
		logger.Debugf("error in initialize nucleiEngine %v", err)
		return
	}

	err = s.nucleiEngine.ExecuteWithCallback(nil)
	if err != nil {
		panic(err)
	}
}
