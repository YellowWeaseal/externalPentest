package web

import (
	"externalPentest/external/model"
	"externalPentest/external/scan_repository"
	"externalPentest/internal/types"
	"github.com/ggicci/httpin"
	jsoniter "github.com/json-iterator/go"
	logger "github.com/sirupsen/logrus"
	"github.com/unrolled/render"
	"net/http"
)

var rnr = render.New(render.Options{
	StreamingJSON: true,
})

func putScanTarget(w http.ResponseWriter, r *http.Request, repo scan_repository.IRepository) {
	input := r.Context().Value(httpin.Input).(*TPostScanTargetRequest)
	rawTarget := model.RawTarget{
		Target:       input.Target,
		ExcludeHosts: input.ExcludeHosts,
		ScanAllIps:   input.ScanAllIps,
		IpVersion:    input.IpVersion,
	}
	if err := repo.SetTarget(types.ScanName(input.ScanName), rawTarget); err != nil {
		logger.Debugf("error during parsing target %v", err)
		rnr.JSON(w, http.StatusBadRequest, "invalid target options")
		return
	}
	rnr.JSON(w, http.StatusOK, "get target options")

}

func PutCommonScanSettings(w http.ResponseWriter, r *http.Request, repo scan_repository.IRepository) {
	input := r.Context().Value(httpin.Input).(*TPostNucleiAdvancedSettingsRequest)
	raw := jsoniter.Unmarshal(input)
	repo.SetScannerSettings(model.RawScanSettings(input))
}
func PutAdvancedScanSetting(w http.ResponseWriter, r *http.Request, repo scan_repository.IRepository) {

}

func StartScanner(w http.ResponseWriter, r *http.Request) {

}

func StopScanner(w http.ResponseWriter, r *http.Request) {

}
