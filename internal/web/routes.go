package web

import (
	"context"
	"externalPentest/external/repository"
	"github.com/ggicci/httpin"
	httpin_integration "github.com/ggicci/httpin/integration"
	"github.com/go-chi/chi/v5"
	"github.com/projectdiscovery/nuclei/v3/pkg/output"
	"github.com/projectdiscovery/nuclei/v3/pkg/progress"
	"github.com/projectdiscovery/nuclei/v3/pkg/reporting"
	"github.com/projectdiscovery/retryablehttp-go"
	"net/http"
	"time"
)

const (
	postTargetURL          = "nucleiManager/target/"
	postCommonOptionsURL   = "nucleiManager/commonOptions/"
	postAdvancedOptionsURL = "nucleiManager/advancedOptions/"
)

const (
	postStartScannerURL = "nucleiManager/start"
	postStopScannerURL  = "nucleiManager/stop"
)

type TPostScanTargetRequest struct {
	ScanName string `json:"scan_name"`
	//-u, -target string[]             target URLs/hosts to scan
	Target []string `json:"target"`
	//-eh, -exclude-hosts string[]     hosts to exclude to scan from the input list (ip, cidr, hostname)
	ExcludeHosts []string `json:"exclude_hosts"`
	//-sa, -scan-all-ips               scan all the IP's associated with dns record
	ScanAllIps bool `json:"scan_all_ips"`
	//-iv, -ip-version string[]        IP version to scan of hostname (4,6) - (default 4)
	IpVersion []string `json:"ip_version"`
}

type TPostNucleiCommonSettingsRequest struct {
	ScanName string `json:"scan_name"`
	//-nt, -new-templates                    run only new templates added in latest nuclei-templates release
	NewTemplates bool `json:"new_templates"`
	//-as, -automatic-scan                   automatic web scan using wappalyzer technology detection to tags mapping
	AutomaticScan bool `json:"automatic_scan"`
	// -t, -templates string[]                list of template or template directory to run (comma-separated, file)
	TemplatesList []string `json:"templates_list"`
	//   -rl, -rate-limit int               maximum number of requests to send per second (default 150)
	RateLimitPerSec int `json:"rate_limit_per_sec"`
	//-rlm, -rate-limit-minute int       maximum number of requests to send per minute
	RateLimitPerMinute int `json:"rate_limit_per_minute"`
	//  maximum number of hosts to be analyzed in parallel per template (default 25)
	BulkSize int `json:"bulk_size"`
	//maximum number of templates to be executed in parallel (default 25)
	Concurrency int `json:"concurrency"`
	//maximum number of headless hosts to be analyzed in parallel per template (default 10)
	HeadlessBulkSize int `json:"headless_bulk_size"`
	//maximum number of headless templates to be executed in parallel (default 10)
	HeadlessConcurrency int `json:"headless_concurrency"`
}
type TPostNucleiAdvancedSettingsRequest struct {
	Templates       []string `json:"templates"`        // template file/directory paths
	Workflows       []string `json:"workflows"`        // workflow file/directory paths
	RemoteTemplates []string `json:"remote_templates"` // remote template urls
	RemoteWorkflows []string `json:"remote_workflows"` // remote workflow urls
	TrustedDomains  []string `json:"trusted_domains"`  // trusted domains for remote templates/workflows

	PageTimeout int `json:"page_timeout"` // timeout for page load

	DisableMaxHostErr     bool     `json:"disable_max_host_err"`    // Disable max host error optimization (Hosts are not skipped even if they are not responding)
	Interface             string   `json:"interface"`               // Interface to use for network scan
	InternalResolversList []string `json:"internal_resolvers_list"` // Use a list of resolver
	LeaveDefaultPorts     bool     `json:"leave_default_ports"`     // Leave default ports for http/https
	MaxHostError          int      `json:"max_host_error"`          // Maximum number of host errors to allow before skipping that host
	Retries               int      `json:"retries"`                 // Number of retries
	SourceIP              string   `json:"source_ip"`               // SourceIP sets custom source IP address for network requests
	SystemResolvers       bool     `json:"system_resolvers"`        // Use system resolvers
	Timeout               int      `json:"timeout"`                 // Timeout in seconds
	TrackError            []string `json:"track_error"`             // Adds given errors to max host error watchlist

	Verbose       bool `json:"verbose"`        // show verbose output
	Silent        bool `json:"silent"`         // show only results
	Debug         bool `json:"debug"`          // show debug output
	DebugRequest  bool `json:"debug_request"`  // show request in debug output
	DebugResponse bool `json:"debug_response"` // show response in debug output
	ShowVarDump   bool `json:"show_var_dump"`  // show variable dumps in output

	Interval         int  `json:"interval"`
	JSON             bool `json:"json"`
	MetricServerPort int  `json:"metric_server_port"`

	Severity             string   `json:"severity"`               // filter by severities (accepts CSV values of info, low, medium, high, critical)
	ExcludeSeverities    string   `json:"exclude_severities"`     // filter by excluding severities (accepts CSV values of info, low, medium, high, critical)
	ProtocolTypes        string   `json:"protocol_types"`         // filter by protocol types
	ExcludeProtocolTypes string   `json:"exclude_protocol_types"` // filter by excluding protocol types
	Authors              []string `json:"authors"`                // fiter by author
	Tags                 []string `json:"tags"`                   // filter by tags present in template
	ExcludeTags          []string `json:"exclude_tags"`           // filter by excluding tags present in template
	IncludeTags          []string `json:"include_tags"`           // filter by including tags present in template
	IDs                  []string `json:"i_ds"`                   // filter by template IDs
	ExcludeIDs           []string `json:"exclude_i_ds"`           // filter by excluding template IDs
	TemplateCondition    []string `json:"template_condition"`     // DSL condition/ expression
}

type TPostInteractshOpts struct {
	ServerURL           string                `json:"server_url,omitempty"`            // ServerURL is the URL of the interactsh server.
	Authorization       string                `json:"authorization,omitempty"`         // Authorization is the Authorization header value
	CacheSize           int                   `json:"cache_size,omitempty"`            // CacheSize is the numbers of requests to keep track of at a time. // Older items are discarded in LRU manner in favor of new requests.
	Eviction            time.Duration         `json:"eviction,omitempty"`              // Eviction is the period of time after which to automatically discard // interaction requests.
	CooldownPeriod      time.Duration         `json:"cooldown_period,omitempty"`       // CooldownPeriod is additional time to wait for interactions after closing // of the poller.
	PollDuration        time.Duration         `json:"poll_duration,omitempty"`         // PollDuration is the time to wait before each poll to the server for interactions.
	Output              output.Writer         `json:"output,omitempty"`                // Output is the output writer for nuclei
	IssuesClient        reporting.Client      `json:"issues_client,omitempty"`         // IssuesClient is a client for issue exporting
	Progress            progress.Progress     `json:"progress,omitempty"`              // Progress is the nuclei progress bar implementation.
	Debug               bool                  `json:"debug,omitempty"`                 // Debug specifies whether debugging output should be shown for interactsh-client
	DebugRequest        bool                  `json:"debug_request,omitempty"`         // DebugRequest outputs interaction request
	DebugResponse       bool                  `json:"debug_response,omitempty"`        // DebugResponse outputs interaction response
	DisableHttpFallback bool                  `json:"disable_http_fallback,omitempty"` // DisableHttpFallback controls http retry in case of https failure for server url
	NoInteractsh        bool                  `json:"no_interactsh,omitempty"`         // NoInteractsh disables the engine
	NoColor             bool                  `json:"no_color,omitempty"`              // NoColor disables printing colors for matches
	StopAtFirstMatch    bool                  `json:"stop_at_first_match,omitempty"`
	HTTPClient          *retryablehttp.Client `json:"http_client,omitempty"`
}

type TPostStartScanRequest struct {
	scanName string
}
type TPostStartScanResponse struct {
	scanName string
}
type TPostStopScanRequest struct {
	scanName string
}
type TPostStopScanResponse struct {
	scanName string
}

func InitRoutes(ctx context.Context, httpRouter *chi.Mux, repo repository.IRepository) {
	httpin_integration.UseGochiURLParam("path", chi.URLParam)

	httpRouter.With(
		httpin.NewInput(TPostScanTargetRequest{}),
	).Post(postTargetURL, func(w http.ResponseWriter, r *http.Request) {
		putScanTarget(w, r, repo)
	})

	httpRouter.With(
		httpin.NewInput(TPostNucleiCommonSettingsRequest{}),
	).Post(postCommonOptionsURL, func(w http.ResponseWriter, r *http.Request) {
		PutCommonScanSettings(w, r, repo)
	})

	httpRouter.With(
		httpin.NewInput(TPostNucleiAdvancedSettingsRequest{}),
	).Post(postAdvancedOptionsURL, func(w http.ResponseWriter, r *http.Request) {
		PutAdvancedScanSetting(w, r, repo)
	})

	httpRouter.With(
		httpin.NewInput(TPostScanTargetRequest{}),
	).Post(postStartScannerURL, func(w http.ResponseWriter, r *http.Request) {
		StartScanner(w, r)
	})

	httpRouter.With(
		httpin.NewInput(TPostScanTargetRequest{}),
	).Post(postStopScannerURL, func(w http.ResponseWriter, r *http.Request) {
		StopScanner(w, r)
	})
}
