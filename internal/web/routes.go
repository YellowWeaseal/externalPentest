package web

import (
	"context"
	"externalPentest/external/scan_repository"
	"github.com/ggicci/httpin"
	httpin_integration "github.com/ggicci/httpin/integration"
	"github.com/go-chi/chi/v5"
	"net/http"
)

const (
	postTargetURL          = "nucleiManager/target/"
	postCommonOptionsURL   = "nucleiManager/commonOptions/"
	postAdvancedOptionsURL = "nucleiManager/advancedOptions/"
)

const (
	postStartScannerURL = "nucleiManager/start"
	postStopScannerURL  = "nucleiManager/stop"
)

type TPostTargetRequest struct {
	Payload *TargetPayload `in:"body=json"`
}

type TPostStartScanRequest struct {
	scanName string
}
type TPostStopScanRequest struct {
	scanName string
}
type TGetStatusScanRequest struct {
	scanName string
}
type TGetStatusScanResponse struct {
	scanName string
}

func InitRoutes(ctx context.Context, httpRouter *chi.Mux, repo scan_repository.IRepository) {
	httpin_integration.UseGochiURLParam("path", chi.URLParam)

	httpRouter.With(
		httpin.NewInput(TPostTargetRequest{}),
	).Post(postTargetURL, func(w http.ResponseWriter, r *http.Request) {
		putScanTarget(w, r, repo)
	})

	httpRouter.With(
		httpin.NewInput(TPostNucleiCommonSettingsRequest{}),
	).Post(postCommonOptionsURL, func(w http.ResponseWriter, r *http.Request) {
		PutCommonScanSettings(w, r, repo)
	})

	httpRouter.With(
		httpin.NewInput(TPostNucleiAdvancedSettingsRequest{}),
	).Post(postAdvancedOptionsURL, func(w http.ResponseWriter, r *http.Request) {
		PutAdvancedScanSetting(w, r, repo)
	})

	httpRouter.With(
		httpin.NewInput(TPostScanTargetRequest{}),
	).Post(postStartScannerURL, func(w http.ResponseWriter, r *http.Request) {
		StartScanner(w, r)
	})

	httpRouter.With(
		httpin.NewInput(TPostScanTargetRequest{}),
	).Post(postStopScannerURL, func(w http.ResponseWriter, r *http.Request) {
		StopScanner(w, r)
	})
}
