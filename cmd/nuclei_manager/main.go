package main

import (
	"context"
	"externalPentest/internal/config"
	"externalPentest/internal/db"
	logger "github.com/sirupsen/logrus"
	"os"
	"runtime/debug"
)

func main() {
	logger.SetFormatter(&logger.JSONFormatter{})
	logger.SetOutput(os.Stdout)
	logger.SetLevel(logger.DebugLevel)

	ctx := context.Background()
	cfg, err := config.LoadConfig[config.NucleiConfig]()
	if err != nil {
		logger.Fatalf("Cannot initialize config. Cannot proceed: %v", err)
	}
	logger.Debug("NucleiManager config initialized")

	defer func() {
		if err := recover(); err != nil {
			logger.Fatalf("Recovered from error: %s", string(debug.Stack()))
		}
	}()
	dbInst, err := db.NewPgx(cfg.DB)
	if err != nil {
		logger.Fatalf("failed to connect database: %v", err)
	}
	logger.Debug(ctx, "Connected to database")

	defer func() {
		errs := dbInst.Destroy()
		for _, err := range errs {
			if err != nil {
				logger.Errorf("can not close database client: %v", err)
			}
		}
	}()

}
